class Queue
{
   private :
    int *data;
	int capacity;
	int nextIndex;
	int frontIndex;
	int size;

  public:
  Queue()
  {
	  data = new int[5];
	  capacity = 5;
	  nextIndex = 0;
	  frontIndex = 0;
	  size = 0;
  }

  void enqueue( int x)
  {
       if(isFull())
       {
           int* newData = new int[2*capacity];
           int j = 0;
           for(int i = frontIndex ; i < capacity ; i++ )
            newData[j++] = data[i];
           for(int i = 0 ; i<frontIndex ; i++)
            newData[j++] = data[i];
           
           frontIndex = 0;
           nextIndex = capacity;
           capacity = capacity * 2;
           delete [] data;
           data = newdata;
           
       }
	     
		
		data[nextIndex] = x;
		nextIndex = (nextIndex+1)%capacity;
		size++;
  } 

  void dequeue()
  {
     if( isEmpty())
     {
          cout<<"Underflow"<<endl;
          return;
     }
	  

	frontIndex = (frontIndex+1)%capacity;
	size--;
	
	if(size == 0)
	{
	     nextIndex = 0;
	  frontIndex = 0;
	}
	
 }

  void getfront()
  {
      if(isEmpty())
      {
          return;
      }
    cout<< data[frontIndex]<<endl;
  }

  void getRear()
  {
        cout<<data[(frontIndex+size-1)%capacity]<<endl;
  }

  void getsize()
  {
        cout<<"Size is "<< size<<endl;
  }
 
  bool isEmpty()
  {
        return (size == 0);
		  
  }
  bool isFull()
  {
	  return( capacity == size);
	    
  }

  
};

