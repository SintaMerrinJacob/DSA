class Deque 
{
    int *arr;
    int size;
    int front;
    int rear;
  
public:
    Deque(int size)
    {
        this -> size = size;
        arr = new int[size];
        front = -1;
        rear = 0;
    }
    
    bool isFull()
    {
        return ((front == 0 && rear == size-1) || front == rear+1);
    }
    
    bool isEmpty ()
{
    return (front == -1);
}
    
    void insertFront(int key)
    {
        if (isFull())
    {
        cout << "-1" << endl;
        return;
    }
  
    // If queue is initially empty
    if (front == -1)
    {
        front = 0;
        rear = 0;
    }
  
    // front is at first position of queue
    else if (front == 0)
        front = size - 1 ;
  
    else // decrement front end by '1'
        front = front-1;
  
    // insert current element into Deque
    arr[front] = key ;
    }
    
    void insertRear( int key)
    {
         if (isFull())
    {
        cout << "-1" << endl;
        return;
    }
  
    // If queue is initially empty
    if (front == -1)
    {
        front = 0;
        rear = 0;
    }
  
    // rear is at last position of queue
    else if (rear == size-1)
        rear = 0;
  
    // increment rear end by '1'
    else
        rear = rear+1;
  
    // insert current element into Deque
    arr[rear] = key ;
    }
    
    void deleteFront()
    {
         if (isEmpty())
    {
        cout << "-1" << endl;
        return ;
    }
  
    // Deque has only one element
    if (front == rear)
    {
        front = -1;
        rear = -1;
    }
    else
        // back to initial position
        if (front == size -1)
            front = 0;
  
        else // increment front by '1' to remove current
            // front value from Deque
            front = front+1;
    }
    
    void deleteRear()
    {
          if (isEmpty())
    {
        cout << "-1" << endl ;
        return ;
    }
  
    // Deque has only one element
    if (front == rear)
    {
        front = -1;
        rear = -1;
    }
    else if (rear == 0)
        rear = size-1;
    else
        rear = rear-1;
    }
    
    int getFront()
    {
        if (isEmpty())
    {
        return -1 ;
    }
    return arr[front];
    }
    
    int getRear()
    {
         if(isEmpty() || rear < 0)
    {
        return -1 ;
    }
    return arr[rear];
    }
    
};

