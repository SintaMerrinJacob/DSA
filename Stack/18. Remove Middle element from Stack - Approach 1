class Node
{
    public:
    int data;
    Node* next;
    
    Node(int d)
    {
        this -> data = d;
        next = NULL;
    }
};
///////////////////////////////REVERSAL FUNCTION ///////////////////////////
Node* reverseLL ( Node* head)
{
    if(head == NULL || head -> next == NULL)
      return head;
      
    Node* rest = reverseLL(head -> next);
    head -> next -> next = head;
    head -> next = NULL;
    
    return rest;
}

//////////////////////////FIND AND REMOVE MID IN LL ///////////////////////////////

void FindAndRemoveMidFromLL(Node* &head)
 {
     Node* slow = head;
     Node* fast = head;
     
     while( fast != NULL && fast -> next != NULL)
     {
         fast = fast -> next -> next;
         slow = slow -> next;
     }
     
     Node*temp = head;
     while(temp -> next != slow && temp != NULL)
     {
         temp = temp -> next;
     }
     
     temp -> next = slow  -> next;
     slow -> next = NULL;
     delete slow;
 }
 
 ///////////////////////RETURN UPDATED STACK WITH MID REMOVED ////////////////////////////

void removemid(stack<int> &s , int n)
{
    if(n == 0)
    {
        s.pop();
        return;
    }
    
 
    
    Node *head = NULL , *tail = NULL;
    while( !s.empty() )
    {
        int x = s.top();
        Node* newnode = new Node(x);
        if(head == NULL)
        {
            head = tail = newnode;
        }
        else
        {
            tail -> next = newnode;
            tail = newnode;
        }
        s.pop();
    }
    cout<<"LL elements are "<<endl;
    Node* temp = head;
    while(temp != NULL)
    {
        cout<<temp -> data<<" ";
        temp = temp -> next;
    }
    
    cout<<endl;
    
    head = reverseLL(head);
    
    cout<<"LL elements after reversal are "<<endl;
    temp = head;
    while(temp != NULL)
    {
        cout<<temp -> data<<" ";
        temp = temp -> next;
    }
    
    cout<<endl;
    
    
    FindAndRemoveMidFromLL(head);
    
    cout<<"LL elements after mid removal are "<<endl;
    temp = head;
    while(temp != NULL)
    {
        cout<<temp -> data<<" ";
        temp = temp -> next;
    }
    
    cout<<endl;
    
     temp = head;
    while(temp!= NULL)
    {
        s.push(temp -> data);
        temp = temp -> next;
    }
    
      
}

int main()
{
   stack <int> s;
   s.push(11);
   s.push(92);
   s.push(36);
   s.push(27);
   
    int n = s.size();
   cout<<s.top()<<endl;
   cout<<"Size is "<<n <<endl;
   
   
   removemid(s,n-1);
   
   cout<<"Final Output is "<<endl;
   while(!s.empty())
   {
       cout << s.top()<<" ";
       s.pop();
   }
   
   return 0;
}
