class Node {
   public:
    int data;
    Node *next;

    Node(int data) {
        this->data = data;
        next = NULL;
    }
};

class Stack 
 {
	// Define the data members
    Node* head;
    int size;
   public:
    Stack() {
        // Implement the Constructor
        head = NULL;
        size = 0;
    }

	/*----------------- Public Functions of Stack -----------------*/

    int getSize() {
        // Implement the getSize() function
        return size;
    }

    bool isEmpty() {
        // Implement the isEmpty() function
        if(head == NULL)
            return true;
        else
            return false;
    }

    void push(int element) {
        // Implement the push() function
        Node* temp = new Node(element);
        temp -> next = head;
        head = temp;
        size++;
    }

    int pop() {
        // Implement the pop() function
        if(head == NULL)
            return -1;
        int res = head -> data;
        Node*temp = head;
        head = head -> next;
        delete temp;
        size--;
        return res;
    }

    int top() {
        // Implement the top() function
        if(head == NULL)
            return -1;
        return head -> data;
    }
};




int main()
{
	
	Stack s;
	s.push(10);
	s.push(15);
	s.push(20);
	s.print();
	s.pop();
	s.print();
	cout<<s.total()<<endl;
	cout<<s.topelement()<<endl;
	cout<<s.isEmpty()<<endl;

	
	return 0;
}
