class Solution 
{
private:
    
    vector<int>NextSmallerElement(vector<int>arr,int n)
    {
        stack<int>s;
        s.push(-1);
        vector<int>ans(n);
        for(int i = n-1 ; i>=0 ; i--)
        {
            int curr = arr[i];
            while( s.top() != -1 && arr[s.top()] >= curr)
                s.pop();
            
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
        
    }
    vector<int>PrevSmallerElement(vector<int>arr,int n)
    {
        stack<int>s;
        s.push(-1);
        vector<int>ans(n);
        for(int i = 0 ; i<n ; i++)
        {
            int curr = arr[i];
           while( s.top() != -1 && arr[s.top()] >= curr)
                s.pop();
            
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
    int largestRectangleArea(vector<int>& arr ) 
    {
        int n = arr.size();
        
        vector<int>next(n);
        next = NextSmallerElement(arr,n);
        
        vector<int>prev(n);
        prev = PrevSmallerElement(arr,n);
        
        int area = INT_MIN;
        
        for(int i = 0 ; i<n; i++)
        {
            int l = arr[i];
            
            
             if(next[i]  == -1)
                 next[i] = n;
            
            int b = next[i] - prev[i] -1;
            int curarea = l*b;
            area = max(area , curarea);
        }
        
        return area;
    }
public:
    int maximalRectangle(vector<vector<char>>& mat) 
    {
         int m = mat.size();
         if(m==0)
             return 0;
         int n = mat[0].size();
         vector<int>histogram(n,0);
         
         int area = 0;
         for(int i = 0; i<m ; i++)
         {
             for(int j = 0 ; j<n ; j++)
             {
                 if(mat[i][j] == '1')
                 {
                     histogram[j] += 1;
                 }
                 else
                     histogram[j] = 0;
                 
             }
             
             area = max(area , largestRectangleArea(histogram));
         }
        return area;
            
    }
};
