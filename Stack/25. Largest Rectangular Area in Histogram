///////////////////////// 1 ///////////////////////

class Solution 
{
private:
    
    vector<int>NextSmallerElement(vector<int>arr,int n)
    {
        stack<int>s;
        s.push(-1);
        vector<int>ans(n);
        for(int i = n-1 ; i>=0 ; i--)
        {
            int curr = arr[i];
            while( s.top() != -1 && arr[s.top()] >= curr)
                s.pop();
            
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
        
    }
    
    vector<int>PrevSmallerElement(vector<int>arr,int n)
    {
        stack<int>s;
        s.push(-1);
        vector<int>ans(n);
        for(int i = 0 ; i<n ; i++)
        {
            int curr = arr[i];
           while( s.top() != -1 && arr[s.top()] >= curr)
                s.pop();
            
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
    
public:
    int largestRectangleArea(vector<int>& arr) 
    {
        int n = arr.size();
        
        vector<int>next(n);
        next = NextSmallerElement(arr,n);
        
        vector<int>prev(n);
        prev = PrevSmallerElement(arr,n);
        
        int area = INT_MIN;
        
        for(int i = 0 ; i<n; i++)
        {
            int l = arr[i];
            
            
             if(next[i]  == -1)
                 next[i] = n;
            
            int b = next[i] - prev[i] -1;
            int curarea = l*b;
            area = max(area , curarea);
        }
        
        return area;
    }
};


///////////////////  2 /////////////////////////
class Solution 
{
public:
    int largestRectangleArea(vector<int>& arr) 
    {
        int n = arr.size();
        stack<int>s;
        s.push(-1);
        int area = arr[0];
        int i = 0;
        vector<int>left_smaller(n,-1) , right_smaller(n,n);
        
        while(i<n)
        {
            while(!s.empty()&&s.top()!=-1&&arr[s.top()]>arr[i])
            {
			right_smaller[s.top()] = i;
			s.pop();
		    }
            if(i>0&&arr[i]==arr[i-1])
            {
			   left_smaller[i] = left_smaller[i-1];
		    }
            else
            {
			   left_smaller[i] = s.top();
		    }
		    s.push(i);
		    i++;
	   }
	   for(int j = 0; j<n; j++)
       {
		
		area = max(area, arr[j]*(right_smaller[j]-left_smaller[j]-1));
	   }
	  return area;
        }
    
};
