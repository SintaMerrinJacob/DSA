//////////////////////////// 1. Hasing  TC : O(N)  SC : O(N) ////////////////

class Solution 
{
private : void insertAtTail(Node* &head , Node* &tail , int d)
{
    Node* newNode = new Node(d);
    if(head == NULL)
    {
        head = tail = newNode;
        return;
    }
    else
    {
        tail -> next = newNode;
        tail = newNode;
    }
}
public:
    Node* copyRandomList(Node* head) 
    {
        if(head == NULL)
            return NULL;
        
        // Step 1 : Create Clone using next pointer
        
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;
        
        Node* temp = head;
        while(temp != NULL)
        {
            insertAtTail( cloneHead, cloneTail , temp -> val);
            temp = temp -> next;
        }
        
        // Step 2: Create a map
        unordered_map<Node* , Node*>OldToNew;
        Node *originalNode = head , *cloneNode = cloneHead;
        
        while( originalNode != NULL)
        {
            OldToNew[originalNode] = cloneNode;
            originalNode = originalNode -> next;
            cloneNode = cloneNode -> next;
        }
        
        originalNode = head;
        cloneNode = cloneHead;
        
        //Step 3: Copying random pointer
        while( originalNode != NULL)
        {
            cloneNode -> random = OldToNew[ originalNode -> random];
            originalNode = originalNode -> next;
            cloneNode = cloneNode -> next;
        }
        
        return cloneHead;
        
    }
};

