int ks(int* weights, int* values, int n, int maxWeight, int** output )
{
      if(n==0 || maxWeight == 0)
          return 0;
    
    if(output[n][maxWeight] != -1)
        return  output[n][maxWeight];
    
    if(weights[0] > maxWeight)
         output[n][maxWeight] =  ks(weights+1 , values+1 , n-1 , maxWeight , output);
    
    else
    {
        int x =  ks(weights+1 , values+1 , n-1 , maxWeight - weights[0] , output) + values[0];
        int y =  ks(weights+1 , values+1 , n-1 , maxWeight, output);
        output[n][maxWeight] = max(x,y);
    }
    
    return  output[n][maxWeight];
        
}


int knapsack(int* weight, int* value, int n, int maxWeight) 
{
	int** output = new int* [n+1];
    for(int i = 0 ; i<=n ; i++)
    {
        output[i] = new int[maxWeight+1];
        for(int j = 0 ; j<=maxWeight ; j++ )
            output[i][j] = -1;
    }
    
    return ks(weight,value,n,maxWeight,output);
}
