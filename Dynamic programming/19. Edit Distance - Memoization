int helper( string s, string t , int** output)
{
     int m = s.size();
     int n = t.size();
    
     if( m == 0 || n ==0 )
        return max(m , n);
    
    if(output[m][n] != -1)
        return output[m][n];
    
    if(s[0] == t[0] )
        output[m][n] =  helper(s.substr(1), t.substr(1), output);
    
    else
    {
         int x =  helper(s.substr(1), t , output) + 1;
        //Delete
        int y = helper(s, t.substr(1) , output) + 1;
        //Replace
        int z = helper(s.substr(1) , t.substr(1), output ) + 1;
        
        output[m][n] = min(x, min(y,z));
    }
    
    return output[m][n];
    
    
}


int editDistance(string s, string t) 
{
    int m = s.size();
    int n = t.size();
    
    int** output = new int*[m+1];
    for(int i = 0 ; i<=m ; i++)
        output[i] = new int[n+1];
    
    for(int i = 0 ; i<=m ; i++)
    {
        for(int j = 0 ; j<=n ; j++)
        {
            output[i][j] = -1;
        }
    }
    
    return helper(s,t,output);
}

   
    

