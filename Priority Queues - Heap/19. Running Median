You are given a stream of n integers. For every ith integer, 
add it to the running list of integers and print the resulting median (of the list till now).
Print the only integer part of median.

Input Format :
Line 1 : An integer N denoting the number of integers in the stream
Line 2 : N integers which are separated by spaces
Output Format :
After each new integer is added to the list print the updated median on a new line
Input Constraints
1 <= n <= 10^5
1 <= Ai <= 10^5
Sample Input 1 :
6
6 2 1 3 7 5
Sample Output 1 :
6
4
2
2
3
4

class MedianFinder 
{
    priority_queue<int>maxheap;
    priority_queue<int , vector<int> , greater<int> >minheap;
    
public:
    
    void addNum(int num) 
    {
        int lsize = maxheap.size();
        int rsize = minheap.size();
        
    //case 1: First element to be inserted - We assume maxheap always has one extra element
    // so we insert very first element to maxheap
        if(lsize == 0 && rsize == 0)
            maxheap.push(num);
        
     //case 2: Maxheap has one extra element , now ideally element should be added to minheap
    // but we have to compare it with top element of maxheap
        
        else if(lsize != rsize)
        {
            if(minheap.size() == 0)
            {
                //if num is greater that maxheap top it can directly be placed in minheap
                if( num > maxheap.top())
                   minheap.push(num);
            
               //else num should be now in left half, so remove maxheap.top() and place it in right half
               else
               {
                int temp = maxheap.top();
                maxheap.pop();
                maxheap.push(num);
                minheap.push(temp);
               }
            }
            else if( num >= minheap.top())
                minheap.push(num);
            
            else
            {
                if( num < maxheap.top())
                {
                    int temp = maxheap.top();
                    maxheap.pop();
                    maxheap.push(num);
                    minheap.push(temp);
                }
                else
                    minheap.push(num);
            }
         
        }
        
    //case 3: if both has equal elements, ideally the current input should go to maxheap
     else if(lsize == rsize)
     {
         //we need to figure out whether num would go to left half or right half
         //if num < top of minheap it will go to maheap
         if(num < minheap.top())
             maxheap.push(num);
         
         // now num should go to right half, but we assumed that minheap always has one element 
         //less than maxheap. So we move one element to left half and then place num in right half
         else
         {
             int temp = minheap.top();
             minheap.pop();
             minheap.push(num);
             maxheap.push(temp);
         }
             
     }
        
            
    }
    
    double findMedian() 
    {
        int lsize = maxheap.size();
        int rsize = minheap.size();
        
        if(lsize > rsize)
            return double(maxheap.top());
        else
            return (double(maxheap.top())+double( minheap.top()))/2;
    }
};











//////////////////////////////////////////ANOTHER WAY OF WRITING SAME CODE////////////////////////////////////////////
void addNum( int num ,   priority_queue<int>&maxheap , priority_queue< int , vector<int> , greater<int> > &minheap )
{
    int lsize = maxheap.size();
    int rsize = minheap.size();
    
    //case 1: Fisrt element
    if(lsize == 0 && rsize == 0)
        maxheap.push(num);
    
    //case 2: Same numbers of elements , num should ideally go to maxheap
    else if( lsize == rsize)
    {
        if(num < minheap.top())
             maxheap.push(num);
        else
        {
            int temp = minheap.top();
             minheap.pop();
             minheap.push(num);
             maxheap.push(temp);
        }
    }
    
    //case 3: Maxheap has one extra element , num should ideally go to minheap
    else
    {
        if( minheap.size() == 0)
        {
            if( num > maxheap.top())
                   minheap.push(num);
            else
            {
                int temp = maxheap.top();
                maxheap.pop();
                maxheap.push(num);
                minheap.push(temp);
            }
        }
        else if( num >= minheap.top())
        {
            minheap.push(num);
        }
        
        else
        {
            if(num >= maxheap.top())
                 minheap.push(num);
            else
            {
                int temp = maxheap.top();
                maxheap.pop();
                maxheap.push(num);
                minheap.push(temp);
            }
        }
    }
    
    
}

void findMedian(int *arr, int n)
{
    priority_queue<int>maxheap;
    priority_queue< int , vector<int> , greater<int> > minheap;
    for(int i = 0 ; i<n ; i++)
    {
        addNum(arr[i] , maxheap , minheap);
        int lsize = maxheap.size();
        int rsize = minheap.size();
        
        if(lsize > rsize)
           cout<<maxheap.top()<<" ";
        else
           cout<<( maxheap.top() + minheap.top() )/2<<" ";
    }
}
