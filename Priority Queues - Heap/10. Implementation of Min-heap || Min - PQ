#include <iostream>
#include <climits>
using namespace std;

class PriorityQueue {
    vector<int> pq;

   public:
    bool isEmpty() { 
        return pq.size() == 0; 
    }

    int getSize() { 
        return pq.size(); 
    }

    int getMin() {
        if (isEmpty()) {
            return 0;
        }

        return pq[0];
    }

    void insert(int element) {
        pq.push_back(element);

        int childIndex = pq.size() - 1;

        while (childIndex > 0) {
            int parentIndex = (childIndex - 1) / 2;

            if (pq[childIndex] < pq[parentIndex]) {
                int temp = pq[childIndex];
                pq[childIndex] = pq[parentIndex];
                pq[parentIndex] = temp;
            } else {
                break;
            }

            childIndex = parentIndex;
        }
    }

    int removeMin() 
    {
        if( isEmpty())
            return 0;
        
        int ans = pq[0];
        pq[0] = pq[ pq.size() - 1];
        pq.pop_back();
        
        
        // down heapify 
        
        int parentIndex = 0;
        int leftchildIndex = 2*parentIndex + 1;
        int rightchildIndex = 2*parentIndex + 2;
        int minIndex = parentIndex;
        int lastindex = pq.size() - 1;
        
        while(  leftchildIndex <= lastindex  ||   rightchildIndex <= lastindex  )
        {
            if( pq[parentIndex] > pq[leftchildIndex]  ||   pq[parentIndex] > pq[rightchildIndex] )
            {
                if(  pq[leftchildIndex] < pq[rightchildIndex] )
                {
                    minIndex = leftchildIndex;
                    swap(pq[parentIndex] ,   pq[leftchildIndex] );
                }
                else
                {
                    minIndex = rightchildIndex;
                    swap(pq[parentIndex] ,   pq[rightchildIndex] );
                }
            }
            else
            {
                break;
            }
            
            parentIndex = minIndex;
            leftchildIndex = 2*parentIndex + 1;
            rightchildIndex = 2*parentIndex + 2;
            
     }
        return ans;
    }
};

int main() {
    PriorityQueue pq;

    int choice;
    cin >> choice;

    while (choice != -1) {
        switch (choice) {
            case 1:  // insert
                int element;
                cin >> element;
                pq.insert(element);
                break;
            case 2:  // getMin
                cout << pq.getMin() << "\n";
                break;
            case 3:  // removeMax
                cout << pq.removeMin() << "\n";
                break;
            case 4:  // size
                cout << pq.getSize() << "\n";
                break;
            case 5:  // isEmpty
                cout << (pq.isEmpty() ? "true\n" : "false\n");
            default:
                return 0;
        }
        
        cin >> choice;
    }
}
