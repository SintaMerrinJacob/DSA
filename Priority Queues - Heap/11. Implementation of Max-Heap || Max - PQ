#include<vector>
class PriorityQueue {
   
   vector<int>pq;
   public:
    
    void insert(int element) 
    {
        pq.push_back(element);
        
        // up Heapify
        
        int childIndex = pq.size() - 1;
        int parentIndex = (childIndex - 1 )/2;
         while( childIndex > 0)
        {
            if( pq[parentIndex] < pq[childIndex])
                swap(  pq[parentIndex] , pq[childIndex] );
            else
                break;
            
            childIndex = parentIndex;
            parentIndex = (childIndex - 1 )/2;
        }
    }

    int getMax() {
        return pq[0];
    }

    int removeMax()
    {
        if(isEmpty())
            return 0;
        
        int ans = pq[0];
        pq[0] = pq[ pq.size() - 1];
        pq.pop_back();
        
        // down Heapify
        
        int parentIndex = 0;
        int leftchildIndex = 2*parentIndex + 1;
        int rightchildIndex = 2*parentIndex + 2;
        int maxIndex = parentIndex;
        
        while( leftchildIndex < pq.size())
        {
            if(pq[parentIndex] < pq[leftchildIndex]    ||  pq[parentIndex] < pq[rightchildIndex]   )
            {
                 if( pq[leftchildIndex]  > pq[ rightchildIndex] )
                 {
                     maxIndex = leftchildIndex;
                     swap( pq[leftchildIndex] ,   pq[parentIndex]);
                 }
                else
                {
                    maxIndex = rightchildIndex;
                    swap( pq[rightchildIndex] ,   pq[parentIndex]);
                }
            }
            else
                break;
            
            parentIndex = maxIndex;
            leftchildIndex = 2*parentIndex + 1;
            rightchildIndex = 2*parentIndex + 2;
            
        }
        
        
        return ans;
    }

    int getSize() { 
        return pq.size();
    }

    bool isEmpty() {
        return (pq.size() == 0);
            
    }
};
