/////////////////////////// 1/////////////////////////////
#include<bits/stdc++.h>
using namespace std;
int board[10][10];

bool isPossible( int n , int row , int col)
{
    //same column
    for(int i = row - 1 ; i>=0 ; i--)
    {
        if(board[i][col] == 1)
            return false;
    }
    
    //upper left diagonal
    for(int i = row-1 , j = col-1 ; i>=0 , j>=0 ; i-- , j--)
    {
        if(board[i][j] == 1)
            return false;
    }
    
     for(int i = row-1 , j = col+1 ; i>=0 , j<n ; i-- , j++)
    {
        if(board[i][j] == 1)
            return false;
    }
    
    return true;
    
}
void QueenHelper(int n , int row)
{
    if(row == n)
    {
        for(int i = 0 ;i<n ; i++)
        {
            for(int j = 0; j<n ; j++)
                cout<<board[i][j]<<" ";
        }
        cout<<endl;
    }
    
    
    for(int j = 0 ; j<n ; j++)
    {
        if( isPossible(n,row,j))
        {
            board[row][j] = 1;
            QueenHelper(n,row+1);
            board[row][j] = 0;
        }
    }
    
    return;
}
void placeNQueens(int n)
{
    memset(board,0 , 10*10*sizeof(int));
    QueenHelper(n,0);
    return;
}
int main(){
    
   int n;
   cin >> n;
    placeNQueens(n);
    return 0;
}

////////////////////////////////2///////////////////////////////////

class Solution 
{
private:
    
    bool isPossible(int n , vector<string> &board  , int row , int col )
    {
         //same column
    for(int i = row - 1 ; i>=0 ; i--)
    {
        if(board[i][col] == 'Q')
            return false;
    }
    
    //upper left diagonal
    for(int i = row-1 , j = col-1 ; i>=0 && j>=0 ; i-- , j--)
    {
        if(board[i][j] == 'Q')
            return false;
    }
    
     for(int i = row-1 , j = col+1 ; i>=0 && j<n ; i-- , j++)
    {
        if(board[i][j] == 'Q')
            return false;
    }
    
    return true;
    }
    void NQueensHelper(int n , int row , vector<vector<string>> &ans, vector<string> &board)
    {
        if(row == n)
        {   
            ans.push_back(board);
        }
        
        for(int j = 0 ; j<n ;j++)
        {
            if( isPossible(n,board,row,j))
            {
                 board[row][j] = 'Q';
                 NQueensHelper(n,row+1,ans,board);
                 board[row][j] = '.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) 
    {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i = 0 ; i<n ; i++)
            board[i] = s;
        NQueensHelper(n,0,ans,board);
        return ans;
    }
};
