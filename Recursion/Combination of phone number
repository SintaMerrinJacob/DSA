Iterative Approach to the problem

Is there an iterative solution to this problem?

Generally, we can convert all-recursive solution to an iterative solution. Here, if we look at the recursion tree, you can draw conclusions that to get all possible strings, 
we can make a DFS search or a BFS search. If we use the DFS approach then we can use stack and if we use BFS then we can use a queue. 
However, the answer would be the same in both the iterative approach.

If we will use the BFS approach, then we can take a queue of strings and will push an empty string to it. 
For all the corresponding keypad characters of the input digit, we will be appending those characters to the front of the queue 
and then pushing them into the queue until the length of strings in the queue becomes equal to the length of the input digit string.




RECURSIVE APPROACH

#include <iostream>
#include<vector>
#include <string>
using namespace std;

void solve(string digits,  vector<string>& ans,  string output, int index, string mapping[]  )
{
    //base case
    if(index>=digits.size())
    {
        ans.push_back(output);
        return;
    }
    
    int number = digits[index]-'0';
    string alphabetsmapped = mapping[number];
    
    for(int i = 0 ; i<alphabetsmapped.size() ; i++)
    {
        output.push_back(alphabetsmapped[i]);
        solve(digits,ans,output,index+1,mapping);
        output.pop_back();
        
    }
        
}

void printKeypad(int num)
{
    string digits = to_string(num);
    vector<string>ans;
    if(digits.size()==0)
        cout<<" "<<endl;
    
    string output;
    int index = 0;
    string mapping[10] = {"" , "" ,"abc" , "def" , "ghi","jkl" , "mno" ,"prqs", "tuv" , "wxyz"};
    solve(digits,ans,output,index,mapping);
    
    for(int i =0 ; i<ans.size() ;i++)
        cout<<ans[i]<<endl;
}
