Given n number of words and an incomplete word w. You need to auto-complete that word w.
That means, find and print all the possible words which can be formed using the incomplete word w.
Note : Order of words does not matter.

class TrieNode {
   public:
    char data;
    TrieNode **children;
    bool isTerminal;

    TrieNode(char data) {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie {
    TrieNode *root;

   public:
    int count;

    Trie() {
        this->count = 0;
        root = new TrieNode('\0');
    }

    bool insertWord(TrieNode *root, string word) {
        // Base case
        if (word.size() == 0) {
            if (!root->isTerminal) {
                root->isTerminal = true;
                return true;
            } else {
                return false;
            }
        }

        // Small calculation
        int index = word[0] - 'a';
        TrieNode *child;

        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }

        // Recursive call
        return insertWord(child, word.substr(1));
    }

    void insertWord(string word) {
        if (insertWord(root, word)) {
            this->count++;
        }
    }

    bool search(TrieNode* root , string word)
    {
        if(word.size() == 0)
            return true;
        
        int index = word[0] - 'a';
        if( root -> children[index] == NULL)
            return false;
        
        return search(root -> children[index] , word.substr(1));
    }
    bool search(string word)
    {
        return search(root , word);
    }
    
    void autoComplete(TrieNode* root , string word)
    {
        if(root -> isTerminal)
            cout<<word<<endl;
        
        for(int i = 0 ; i<26 ; i++)
        {
            if(root -> children[i] != NULL)
            {
                char c = i+'a';
                  autoComplete(root -> children[i],word+c);
            }
        }
    }
    void autoComplete(vector<string> input, string pattern) 
    {
        for(int i = 0 ; i<input.size() ; i++)
            insertWord(input[i]);
        
        if( search(pattern) == false)
            return;
        
        string word = pattern;
        
        while( pattern.size() )
        {
            int index = pattern[0] - 'a';
            root = root -> children[index];
            pattern = pattern.substr(1);
        }
        
        autoComplete(root,word);
    }
};
