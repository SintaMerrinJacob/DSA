You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:

Sort the values at odd indices of nums in non-increasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.
Sort the values at even indices of nums in non-decreasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.

vector<int> sortEvenOdd(vector<int>& nums) 
    {
        vector<int>even;
        vector<int>odd;
        for(int i = 0 ; i<nums.size() ; i++)
        {
            if(!(i&1))
                even.push_back(nums[i]);
            else
                 odd.push_back(nums[i]);
        }
        
        sort(even.begin() , even.end());
        sort(odd.begin(), odd.end(),greater<int>());
        
        int i =0 , j=0;
        for(int k = 0 ; k<nums.size() ; k++)
        {
            if(!(k&1))
            {
               nums[k] = even[i];
                i++;
            }
                
            else
            {
                nums[k] = odd[j];
                j++;
            }
                
                
                
        }
        
        return nums;
    }
