int pairSum(int *arr, int start , int end , int num)
{
   int count = 0;
   while( start < end)
   {
       if( arr[start] + arr[end] < num )
           start++;
       
       else if( arr[start] + arr[end] > num )
           end--;
       
       else
       {
           int ElementAtStart = arr[start];
           int ElementAtEnd = arr[end];
           
           if( ElementAtStart == ElementAtEnd )
           {
               int TotalElementsFromStartToEnd = (end - start) + 1;
               count +=  TotalElementsFromStartToEnd * (TotalElementsFromStartToEnd - 1)/2 ;
               return count;
           }
           
           int tempStart = start + 1;
           int tempEnd = end - 1;
           
           while( tempStart <= tempEnd  &&  arr[tempStart] == ElementAtStart )
               tempStart++;
           
           while( tempStart <= tempEnd  && arr[tempEnd] == ElementAtEnd)
               tempEnd--;
           
           int totalfromStart = tempStart - start;
           int totalfromEnd = end - tempEnd;
           
           count += totalfromStart*totalfromEnd;
           
           start = tempStart;
           end = tempEnd;
       }
   }
    return count;
}



int tripletSum(int *arr, int n, int num)
{
	sort(arr,arr+n);
    
    int count = 0;
    for(int i = 0 ; i<n ; i++)
    {
        count += pairSum(arr,i+1,n-1,num-arr[i]);
    }
    return count;
}
