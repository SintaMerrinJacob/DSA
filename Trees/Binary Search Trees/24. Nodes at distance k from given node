void printkdistanceNodeDown(BinaryTreeNode<int> *root, int k)
{
    if( root == NULL || k<0)
        return;
    
    if(k == 0)
    {
        cout << root->data << endl;
        return;
    }
    
    printkdistanceNodeDown(root -> left, k-1);
    printkdistanceNodeDown(root -> right, k-1);
        
}
int solve(BinaryTreeNode<int> *root, int node, int k)
{
    if( root == NULL )
        return -1;
    
    if( root -> data == node)
    {
        printkdistanceNodeDown(root, k);
        return 0;
    }
    
    int dleft = solve( root -> left , node , k);
    if( dleft != -1)
    {
        if (dleft + 1 == k)
            cout << root->data << endl;
 
         
         else
            printkdistanceNodeDown(root->right, k-dleft-2);
 
         
         return 1 + dleft;
    }
    
    int dright = solve( root -> right , node , k);
    if(dright != -1)
    {
        if (dright + 1 == k)
            cout << root->data << endl;
         else
            printkdistanceNodeDown(root->left, k-dright-2);
         return 1 + dright;
    }
    
    return -1;
    
}
void nodesAtDistanceK(BinaryTreeNode<int> *root, int node, int k) 
{
   int dis = solve(root , node , k);
}
