class Solution 
{
private:
    TreeNode* LCAUtil(TreeNode* root, TreeNode* p, TreeNode* q)
    {
        if(root == NULL || root == p || root == q)
            return root;
        
        if( root -> val < p -> val && root -> val < q -> val)
            return LCAUtil(root->right , p , q);
        else if ( root -> val > p -> val && root -> val > q -> val)
            return LCAUtil(root->left , p , q);
        
        TreeNode* LCA1 = LCAUtil(root->left , p , q);
        TreeNode* LCA2 = LCAUtil(root->right , p , q);
        
        if(LCA1 == NULL && LCA2 == NULL)
            return NULL;
        else if(LCA1 != NULL && LCA2 == NULL)
            return LCA1;
        else if(LCA1 == NULL && LCA2 != NULL)
            return LCA2;
        else
            return root;
        
    }
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        TreeNode* ansnode = LCAUtil(root , p , q);
         
        return (ansnode == NULL) ? NULL : ansnode;
    }
};
