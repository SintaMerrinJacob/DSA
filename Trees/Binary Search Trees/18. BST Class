#include<queue>
class BST 
{
    
   BinaryTreeNode<int>* root;
 public:
    
    BST() 
    { 
        root = NULL;
    }
  
    ~BST()
   {
       delete root;
   }
	
private:
    BinaryTreeNode<int>* remove(int data , BinaryTreeNode<int>* root)
    {
        if(root == NULL)
            return NULL;
        
        if( data < root -> data )
        {
            root -> left = remove( data , root -> left);
            return root;
        }
        else if( data > root -> data)
        {
            root -> right = remove( data , root -> right);
            return root;
        }
        else
        {
            if( root -> left == NULL && root -> right == NULL)
            {
                delete root;
                return NULL;
            }
            else if(  root -> left == NULL)
            {
                BinaryTreeNode<int>* temp = root -> right;
                root -> right = NULL;
                delete root;
                return temp;
            }
            else if(  root -> right == NULL)
            {
                BinaryTreeNode<int>* temp = root -> left;
                root -> left = NULL;
                delete root;
                return temp;
            }
            else
            {
                 BinaryTreeNode<int>*  minNode = root -> right;
                while( minNode -> left != NULL)
                {
                    minNode = minNode -> left;
                }
                root -> data = minNode -> data;
                root -> right =  remove( minNode->data , root -> right);
                return root;
            }
        }
    }
    
public:
    void remove(int data) 
    { 
        root = remove( data , root);
    }

private:
    BinaryTreeNode<int>* insert(int data , BinaryTreeNode<int>* root)
    {
        if(root == NULL)
        {
            BinaryTreeNode<int>* newnode = new BinaryTreeNode<int>(data);
            return newnode;
        }
        
         if( data <= root -> data)
         {
             root -> left =  insert( data , root -> left);
         }
        else
        {
            root -> right =  insert( data , root -> right);
        }
        return root;
    }

public:
    void insert(int data) 
    { 
        root = insert( data , root);
    }
    
private:
    bool search(int data , BinaryTreeNode<int>* root)
    {
         if(root == NULL)
             return false;
        
        if(root -> data == data )
            return true;
        else if( data < root -> data )
            return search(data , root -> left);
        else
            return search(data , root -> right);
    }
public:
     bool search(int data) 
    {
		 return search(data , root);
    }

private:
    void print(BinaryTreeNode<int>* root)
    {
         if(root == NULL)
             return;
      cout << root -> data<<":";
      if( root -> left != NULL)
          cout << "L:"<<root -> left -> data<<",";
      if( root -> right != NULL)
          cout << "R:"<<root -> right -> data;
       cout<<endl;
       print( root -> left);
       print( root -> right);
    }
    
public:
  void print() 
    { 
        print(root);
    }

   
};
