class Solution 
{
private :
   
    TreeNode* solve( vector<int>& preorder, int ps , int pe , vector<int>& inorder , int is , int ie )
    {
        if(ps > pe || is > ie)
            return NULL;
        
        int rootdata = preorder[ps];
        TreeNode* root = new TreeNode(rootdata);
        
        int k = 0;
        for( int i = is ; i<= ie ; i++)
        {
            if( rootdata == inorder[i] )
            {
                k = i;
                break;
            }
        }
        
        root -> left = solve(preorder , ps + 1 , ps + (k - is) , inorder , is , k-1 );
        root -> right = solve(preorder , ps + (k - is) + 1  , pe , inorder , k+1 , ie);
        
        return root;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        int preStart = 0;
        int preEnd = preorder.size()-1;
        int InStart = 0;
        int InEnd = inorder.size()-1;
        
        return solve(preorder , preStart ,preEnd , inorder , InStart , InEnd );
    }
};
